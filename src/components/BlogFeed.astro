---
import {
  parse,
  object,
  string,
  number,
  literal,
  array,
  picklist,
  optional,
} from "valibot";
import { timeAgo } from "@guardian/libs";
const CAPI_KEY = import.meta.env.CAPI_KEY ?? "test";

const searchResponseSchema = object({
  response: object({
    status: literal("ok"),
    results: array(
      object({
        webUrl: string(),
        webPublicationDate: string(),
        webTitle: string(),
        fields: optional(
          object({
            byline: string(),
          }),
        ),
      }),
    ),
  }),
});

const queryParams = new URLSearchParams({
  tag: "info/series/engineering-blog",
  "show-fields": "byline",
  "api-key": CAPI_KEY,
});

const contentResultSchema = object({
  config: object({
    thumbnail: string(),
  }),
  mainMediaElements: array(
    object({
      data: object({
        alt: string(),
      }),
      imageSources: array(
        object({
          weighting: picklist([
            "inline",
            "thumbnail",
            "showcase",
            "immersive",
            "supporting",
            "halfwidth",
          ]),
          srcSet: array(
            object({
              src: string(),
              width: number(),
            }),
          ),
        }),
      ),
    }),
  ),
});

const posts = await fetch(
  `https://content.guardianapis.com/search?${queryParams.toString()}`,
)
  .then((r) => r.json())
  .then((d) => parse(searchResponseSchema, d).response.results)
  .then((r) =>
    Promise.all(
      r.slice(0, 9).map(async (post) => {
        const time = new Date(post.webPublicationDate).getTime();
        const pubDate = timeAgo(time);

        const article = await fetch(post.webUrl + ".json?dcr")
          .then((r) => r.json())
          .then((d) => parse(contentResultSchema, d));

        const media = article.mainMediaElements[0];

        const thumbnail = article.config.thumbnail;
        const defaultWidth = 500;

        const { src, width } =
          media?.imageSources
            .find((source) => source.weighting === "inline")
            ?.srcSet.slice()
            .sort((a, b) => a.width - b.width)
            .find((src) => src.width > 600) ?? {};

        const image = {
          src: src ?? thumbnail,
          width: width ?? defaultWidth,
          alt: media?.data.alt,
        };

        return {
          time,
          image,
          url: post.webUrl,
          title: post.webTitle,
          byline: post.fields?.byline,
        };
      }),
    ),
  );
---

<h3>Latest Engineering blog posts</h3>
<ul>
  {
    posts.map((post) => (
      <li>
        <a href={post.url}>
          <figure>
            <img
              src={post.image.src}
              width={post.image.width}
              alt={post.image.alt}
            />
          </figure>
          <h4>{post.title}</h4>
          <h5 class="byline">{post.byline}</h5>
          <h5>{timeAgo(post.time)}</h5>
        </a>
      </li>
    ))
  }
</ul>
<a href="https://www.theguardian.com/info/series/engineering-blog"
  >Read more on our Engineering blog</a
>

<style lang="scss">
  ul {
    display: grid;
    list-style-type: none;
    padding: 0;
    gap: 1rem;
    grid-template-columns: 1fr;

    @media (min-width: 740px) {
      & {
        grid-template-columns: 1fr 1fr 1fr;
      }
    }

    li {
      padding: 0;

      a {
        color: inherit;
        text-decoration: none;
        padding: 0.5rem;
        display: block;
        box-sizing: border-box;
        height: 100%;
        background-color: #333;
      }

      figure {
        margin: 0;
        padding-top: 75%;
        width: 100%;
        position: relative;
        overflow: hidden;

        img {
          width: 100%;
          height: 100%;
          position: absolute;
          top: 0;
          left: 0;
          object-fit: cover;
        }
      }

      h4 {
        padding-top: 0.5rem;
      }

      h4,
      h5 {
        margin: 0;
      }

      h5 {
        padding-top: 0.5rem;
        font-weight: normal;
        text-decoration: none;
        color: inherit;
      }

      .byline {
        font-style: italic;
      }
    }
  }
</style>
